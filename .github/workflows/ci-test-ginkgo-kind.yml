name: ci-test-kind

on:
  push:
    branches: [k0s-tests, main]
    paths:
      - "KubeArmor/**"
      - "tests/**"
      - "protobuf/**"
      - ".github/workflows/ci-test-ginkgo-kind.yml"
      - "pkg/KubeArmorOperator/**"
      - "deployments/helm/**"
  pull_request:
    branches: [main]
    paths:
      - "KubeArmor/**"
      - "tests/**"
      - "protobuf/**"
      - ".github/workflows/ci-test-ginkgo-kind.yml"
      - "pkg/KubeArmorOperator/**"
      - "deployments/helm/**"

# Declare default permissions as read only.
permissions: read-all

jobs:
  microk8s-test:
    name: microk8s Auto-testing Framework / ${{ matrix.os }} / ${{ matrix.runtime }}
    runs-on: ${{ matrix.os }}
    env:
      RUNTIME: ${{ matrix.runtime }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, ubuntu-latest]
        runtime: ["containerd"]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'KubeArmor/go.mod'

      - name: Install the latest LLVM toolchain
        run: ./.github/workflows/install-llvm.sh

      - name: Compile libbpf
        run: ./.github/workflows/install-libbpf.sh

      - name: Create Kind Cluster              
        uses: helm/kind-action@v1.10.0

      - name: Test kind
        run: |
          kubectl get no -o wide
          kubectl get pods -A -o wide
          kind get clusters
          kind get nodes --name chart-testing

      - name: deploy pre existing pod 
        run: |
            kubectl apply -f ./tests/k8s_env/ksp/pre-run-pod.yaml
            kubectl wait --timeout=2m --for=condition=ready pod --all -n nginx
            kubectl get pods -A

      - name: Generate KubeArmor artifacts
        run: |
          GITHUB_SHA=$GITHUB_SHA ./KubeArmor/build/build_kubearmor.sh

      - name: Build Kubearmor-Operator
        working-directory: pkg/KubeArmorOperator
        run: |
          make docker-build

      # - name: deploy pre existing pod 
      #   run: |
      #       kubectl apply -f ./tests/k8s_env/ksp/pre-run-pod.yaml
      #       kubectl wait --timeout=2m --for=condition=ready pod --all -n nginx
      #       kubectl get pods -A

      - name: Run KubeArmor
        run: |
            docker ps -a
            docker save -o kubearmor-init.tar kubearmor/kubearmor-init:latest
            docker save -o kubearmor.tar kubearmor/kubearmor:latest
            docker save -o kubearmor-operator.tar kubearmor/kubearmor-operator:latest
            docker save -o kubearmor-snitch.tar kubearmor/kubearmor-snitch:latest

            docker exec chart-testing-control-plane crictl images

            sudo kind load image-archive --name chart-testing --nodes chart-testing-control-plane kubearmor-init.tar
            sudo kind load image-archive --name chart-testing --nodes chart-testing-control-plane kubearmor.tar
            sudo kind load image-archive --name chart-testing --nodes chart-testing-control-plane kubearmor-operator.tar
            sudo kind load image-archive --name chart-testing --nodes chart-testing-control-plane kubearmor-snitch.tar

            docker ps -a
            docker exec -it chart-testing-control-plane crictl images

            helm upgrade --install kubearmor-operator ./deployments/helm/KubeArmorOperator -n kubearmor --create-namespace --set kubearmorOperator.image.tag=latest
            kubectl wait --for=condition=ready --timeout=5m -n kubearmor pod -l kubearmor-app=kubearmor-operator
            kubectl get pods -A
            kubectl apply -f pkg/KubeArmorOperator/config/samples/kubearmor-test.yaml
            kubectl wait -n kubearmor --timeout=5m --for=jsonpath='{.status.phase}'=Running kubearmorconfigs/kubearmorconfig-test
            kubectl wait --timeout=7m --for=condition=ready pod -l kubearmor-app,kubearmor-app!=kubearmor-snitch,kubearmor-app!=kubearmor-controller -n kubearmor
            kubectl wait --timeout=1m --for=condition=ready pod -l kubearmor-app=kubearmor-controller -n kubearmor
            kubectl get pods -A

      - name: Test KubeArmor using Ginkgo
        run: |
          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo
          go mod tidy
          ginkgo --vv --flake-attempts=10 --timeout=10m smoke/
        working-directory: ./tests/k8s_env

      - name: Get karmor sysdump
        if: ${{ failure() }}
        run: |
          kubectl describe pod -n kubearmor -l kubearmor-app=kubearmor
          curl -sfL http://get.kubearmor.io/ | sudo sh -s -- -b /usr/local/bin
          mkdir -p /tmp/kubearmor/ && cd /tmp/kubearmor && karmor sysdump

      - name: Archive log artifacts
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: kubearmor.logs
          path: |
            /tmp/kubearmor/
            /tmp/kubearmor.*

